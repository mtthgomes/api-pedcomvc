import { Injectable } from "@nestjs/common";
import { CreateUserDto } from '@app/shared/dtos/auth/createUser.dto';
import { PrismaService } from 'src/shared/database/prisma.service';
import { isValidCPF } from "src/shared/validators/cpf.validator";

@Injectable()
export class ValidatorDoctorUseCase {
  constructor(private prisma: PrismaService) {}

  // ðŸ”¹ FunÃ§Ã£o principal que valida todas as regras
  async validateAll(doctorDTO: CreateUserDto): Promise<{ error: boolean; data: string }> {
    // ðŸ”¹ ValidaÃ§Ã£o de campos obrigatÃ³rios
    const requiredFields = ['whatsapp', 'cpf', 'name', 'email', 'passwordHash'];
    const missingFields = requiredFields.filter((field) => !doctorDTO[field]);
    if (missingFields.length) {
        return { error: true, data: `Os campos ${missingFields.join(', ')} nÃ£o podem ser vazios` };
    }

    // ðŸ”¹ ValidaÃ§Ã£o de CPF
    if (!isValidCPF(doctorDTO.cpf)) {
        return { error: true, data: 'CPF invÃ¡lido' };
    }

    // ðŸ”¹ ValidaÃ§Ã£o de GÃªnero
    if (!['MALE', 'FEMALE', 'OTHER'].includes(doctorDTO.gender)) {
        return { error: true, data: 'GÃªnero nÃ£o existe' };
    }

    // ðŸ”¹ ValidaÃ§Ã£o de existÃªncia no banco de dados (retorna no primeiro erro encontrado)
    const [existingCpf, existingPhone, existingEmail] = await Promise.all([
        this.prisma.doctor.findFirst({ where: { cpf: doctorDTO.cpf } }),
        this.prisma.doctor.findFirst({ where: { whatsapp: doctorDTO.whatsapp } }),
        this.prisma.doctor.findFirst({ where: { email: doctorDTO.email } }),
    ]);

    if (existingCpf) {
        return { error: true, data: "Esse CPF jÃ¡ estÃ¡ em uso." };
    }
    if (existingPhone) {
        return { error: true, data: "Esse telefone jÃ¡ estÃ¡ em uso." };
    }
    if (existingEmail) {
        return { error: true, data: "Esse Email jÃ¡ estÃ¡ em uso." };
    }

    // ðŸ”¹ Retorno final
    return { error: false, data: "ValidaÃ§Ã£o concluÃ­da com sucesso" };
  }
}